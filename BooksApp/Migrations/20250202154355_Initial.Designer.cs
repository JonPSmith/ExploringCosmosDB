// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlDataLayer.SqlBookEfCore;

#nullable disable

namespace BooksApp.Migrations
{
    [DbContext(typeof(BookSqlDbContext))]
    [Migration("20250202154355_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookTag", b =>
                {
                    b.Property<int>("BooksBookId")
                        .HasColumnType("int");

                    b.Property<string>("TagsTagId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("BooksBookId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Author", b =>
                {
                    b.Property<byte>("AuthorId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<decimal>("ActualPrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<int?>("DetailsBookDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManningBookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrgPrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("PromotionalText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("PublishedOn")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("ActualPrice");

                    b.HasIndex("DetailsBookDetailsId");

                    b.HasIndex("PublishedOn");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<byte?>("AuthorId1")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId1");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.BookDetails", b =>
                {
                    b.Property<int>("BookDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookDetailsId"));

                    b.Property<string>("AboutAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutReader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTechnology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsInside")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookDetailsId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.PriceOffer", b =>
                {
                    b.Property<int>("PriceOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceOfferId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("PromotionalText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PriceOfferId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("PriceOffers");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumStars")
                        .HasColumnType("int");

                    b.Property<string>("VoterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Tag", b =>
                {
                    b.Property<string>("TagId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BookTag", b =>
                {
                    b.HasOne("SqlDataLayer.Classes.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SqlDataLayer.Classes.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Book", b =>
                {
                    b.HasOne("SqlDataLayer.Classes.BookDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsBookDetailsId");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.BookAuthor", b =>
                {
                    b.HasOne("SqlDataLayer.Classes.Author", "Author")
                        .WithMany("BooksLink")
                        .HasForeignKey("AuthorId1");

                    b.HasOne("SqlDataLayer.Classes.Book", "Book")
                        .WithMany("AuthorsLink")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.PriceOffer", b =>
                {
                    b.HasOne("SqlDataLayer.Classes.Book", null)
                        .WithOne("Promotion")
                        .HasForeignKey("SqlDataLayer.Classes.PriceOffer", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Review", b =>
                {
                    b.HasOne("SqlDataLayer.Classes.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Author", b =>
                {
                    b.Navigation("BooksLink");
                });

            modelBuilder.Entity("SqlDataLayer.Classes.Book", b =>
                {
                    b.Navigation("AuthorsLink");

                    b.Navigation("Promotion");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
